%% 
%%  
%% 
%%
%% Abstract:
%%   Template definitions for Lookup2D.
%%
%% Copyright 1994-2011 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%<LibASAP2RegisterTemplate("Lookup2D")>

%function ASAP2UserFcnRecordLayoutAlias_Lookup2D(dtId) void
  %switch dtId
    %case tSS_UINT8
      %return "Lookup2D_UBYTE"
    %case tSS_INT8
      %return "Lookup2D_BYTE"
    %case tSS_UINT16
      %return "Lookup2D_UWORD"
    %case tSS_INT16
      %return "Lookup2D_WORD"
    %case tSS_UINT32
      %return "Lookup2D_ULONG"
    %case tSS_INT32
      %return "Lookup2D_LONG"
    %case tSS_SINGLE
      %return "Lookup2D_FLOAT32_IEEE"
    %case tSS_DOUBLE
      %return "Lookup2D_FLOAT64_IEEE"
    %default
     %%START_ASSERT
       %assign errTxt = "Unhandled dataType. DataTypeID = %<dtId>"
       %<LibReportError(errTxt)>
     %%END_ASSERT
  %endswitch
%endfunction

%function ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(dtId) void
  %switch dtId
    %case tSS_UINT8
      %return "Lookup2D_X_UBYTE"
    %case tSS_INT8
      %return "Lookup2D_X_BYTE"
    %case tSS_UINT16
      %return "Lookup2D_X_UWORD"
    %case tSS_INT16
      %return "Lookup2D_X_WORD"
    %case tSS_UINT32
      %return "Lookup2D_X_ULONG"
    %case tSS_INT32
      %return "Lookup2D_X_LONG"
    %case tSS_SINGLE
      %return "Lookup2D_X_FLOAT32_IEEE"
    %case tSS_DOUBLE
      %return "Lookup2D_X_FLOAT64_IEEE"
    %default
      %%START_ASSERT
        %assign errTxt = "Unhandled dataType. DataTypeID = %<dtId>"
        %<LibReportError(errTxt)>
      %%END_ASSERT
  %endswitch
%endfunction

%function ASAP2UserFcnWriteRecordLayout_Lookup2D() Output
    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_UINT8)>
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_UINT8)>
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_INT8)>
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_INT8)>
      AXIS_PTS_X  1 SBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_UINT16)>
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_UINT16)>
      AXIS_PTS_X  1 UWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_INT16)>
      FNC_VALUES  1 SWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_INT16)>
      AXIS_PTS_X  1 SWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_UINT32)>
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_UINT32)>
      AXIS_PTS_X  1 ULONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_INT32)>
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_INT32)>
      AXIS_PTS_X  1 SLONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_SINGLE)>
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_SINGLE)>
      AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(tSS_DOUBLE)>
      FNC_VALUES  1  FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT

    /begin RECORD_LAYOUT %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(tSS_DOUBLE)>
      AXIS_PTS_X 1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT

%endfunction

%% Function: ASAP2UserFcnWriteSTDAxisRecordLayout_Lookup2D ========
%% Abstract: Write out record layout for Lookup 2D block characteristic whose 
%% axis type is in Standard Axis format.
%function ASAP2UserFcnWriteSTDAxisRecordLayout_Lookup2D(recordLayout) Output
  %assign recordLayoutName = recordLayout.Name
  %%
  %assign tablePosInBus = recordLayout.STDAxisInfo[0]
  %assign xAxisPosInBus = recordLayout.STDAxisInfo[1]
  %assign yAxisPosInBus = recordLayout.STDAxisInfo[2]
  %%
  %assign xDtId = recordLayout.BusElement[xAxisPosInBus].DataTypeIdx
  %assign yDtId = recordLayout.BusElement[yAxisPosInBus].DataTypeIdx
  %assign zDtId = recordLayout.BusElement[tablePosInBus].DataTypeIdx
  %%
  %assign xDtId = LibGetDataTypeStorageIdFromId(xDtId)
  %assign yDtId = LibGetDataTypeStorageIdFromId(yDtId)
  %assign zDtId = LibGetDataTypeStorageIdFromId(zDtId)
  %%
  %assign xAxisDataType = ASAP2UserFcnRecordLayoutAlias_Common(xDtId)
  %assign yAxisDataType = ASAP2UserFcnRecordLayoutAlias_Common(yDtId)
  %assign tableDataType = ASAP2UserFcnRecordLayoutAlias_Common(zDtId)
   /begin RECORD_LAYOUT %<recordLayoutName>
     AXIS_PTS_X %<xAxisPosInBus+1> %<xAxisDataType> INDEX_INCR DIRECT
     AXIS_PTS_Y %<yAxisPosInBus+1> %<yAxisDataType> INDEX_INCR DIRECT
     FNC_VALUES %<tablePosInBus+1> %<tableDataType> COLUMN_DIR DIRECT
   /end   RECORD_LAYOUT   
   
%endfunction

%% Function: ASAP2UserFcnWriteCharacteristic_Lookup2D(paramGroup) Output ========
%% Abstract:
%%   Write Lookup2D block characteristic to the a2l file. Depending on the axis
%%   type call appropirate functions to write the axis description to the a2l
%%   file.
%function ASAP2UserFcnWriteCharacteristic_Lookup2D(paramGroup) Output
  %assign xParam = paramGroup.Member[0].Reference
  %assign yParam = paramGroup.Member[1].Reference
  %assign zParam = paramGroup.Member[2].Reference

  %<LibASAP2AddCharacteristicToGraphicalGroups(zParam)>
%selectfile ASAP2List
%<LibASAP2GetSymbol(zParam)>
%selectfile ModelASAP2File
    /begin CHARACTERISTIC      
      /* Name                   */      %<LibASAP2GetSymbol(zParam)>
      /* Long Identifier        */      "%<LibASAP2GetLongID(zParam)>"
      %assign dtId = LibASAP2GetDataTypeId(zParam)
      /* Characteristic Type    */      MAP
      /* ECU Address            */      %<LibASAP2GetAddress(zParam)>
      %if (paramGroup.xAxisType == "STD_AXIS")
      /* Record Layout          */      %<paramGroup.RecordLayoutName>
      %else
      /* Record Layout          */      %<ASAP2UserFcnRecordLayoutAlias_Lookup2D(dtId)>
      %endif
      /* Maxdiff                */      0
      /* Conversion Method      */      %<LibASAP2GetCompuMethod(zParam)>
      /* Lower Limit            */      %<LibASAP2GetPhysicalMin(zParam)>
      /* Upper Limit            */      %<LibASAP2GetPhysicalMax(zParam)>
  %%
  %if(paramGroup.yAxisType      == "COM_AXIS")
    %<ASAP2UserFcnWriteComAxis("Y-Axis",yParam,paramGroup.ColIdxSigName)>\
  %elseif (paramGroup.yAxisType == "STD_AXIS")
    %<ASAP2UserFcnWriteStdAxis("Y-Axis",yParam,paramGroup.ColIdxSigName)>\
  %elseif (paramGroup.yAxisType == "FIX_AXIS")
    %<ASAP2UserFcnWriteFixAxis("Y-Axis",yParam,paramGroup.ColIdxSigName)>\
  %elseif (paramGroup.yAxisType == "FIX_AXIS_PAR_LIST")
    %<ASAP2UserFcnWriteFixAxisList("Y-Axis",yParam,paramGroup.ColIdxSigName)>\
  %endif  
  %if(paramGroup.xAxisType      == "COM_AXIS")
    %<ASAP2UserFcnWriteComAxis("X-Axis",xParam,paramGroup.RowIdxSigName)>\
  %elseif (paramGroup.xAxisType == "STD_AXIS")
    %<ASAP2UserFcnWriteStdAxis("X-Axis",xParam,paramGroup.RowIdxSigName)>\
  %elseif (paramGroup.xAxisType == "FIX_AXIS")
    %<ASAP2UserFcnWriteFixAxis("X-Axis",xParam,paramGroup.RowIdxSigName)>\
  %elseif (paramGroup.xAxisType == "FIX_AXIS_PAR_LIST")
    %<ASAP2UserFcnWriteFixAxisList("X-Axis",xParam,paramGroup.RowIdxSigName)>\
  %endif       
    /end CHARACTERISTIC
   %%
   %if ((paramGroup.xAxisType == "COM_AXIS") && (!paramGroup.xIsDuplicateBreakPoint))
    %assign dtId = LibASAP2GetDataTypeId(xParam)  
    
    /begin AXIS_PTS
      /* Name                   */      %<LibASAP2GetSymbol(xParam)>
      /* Long Identifier        */      "%<LibASAP2GetLongID(xParam)>"
      /* ECU Address            */      %<LibASAP2GetAddress(xParam)>
      %if ISEMPTY(paramGroup.RowIdxSigName)
      /* Input Quantity         */      NO_INPUT_QUANTITY
      %else
      /* Input Quantity         */      %<paramGroup.RowIdxSigName>
      %endif
      /* Record Layout          */      %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(dtId)>
      /* Maximum Difference     */      0
      /* Conversion Method      */      %<LibASAP2GetCompuMethod(xParam)>
      /* Number of Axis Pts     */      %<LibASAP2GetNumAxisPts(xParam)>
      /* Lower Limit            */      %<LibASAP2GetPhysicalMin(xParam)>
      /* Upper Limit            */      %<LibASAP2GetPhysicalMax(xParam)>
    /end AXIS_PTS
   %endif
   %%
   %if ((paramGroup.yAxisType == "COM_AXIS") && (!paramGroup.yIsDuplicateBreakPoint))
    %assign dtId = LibASAP2GetDataTypeId(yParam) 
    
    /begin AXIS_PTS
      /* Name                   */      %<LibASAP2GetSymbol(yParam)>
      /* Long Identifier        */      "%<LibASAP2GetLongID(yParam)>"
      /* ECU Address            */      %<LibASAP2GetAddress(yParam)>
      %if ISEMPTY(paramGroup.ColIdxSigName)
      /* Input Quantity         */      NO_INPUT_QUANTITY
      %else
      /* Input Quantity         */      %<paramGroup.ColIdxSigName>
      %endif
      /* Record Layout          */      %<ASAP2UserFcnRecordLayoutAlias_X_AXIS_Lookup2D(dtId)>
      /* Maximum Difference     */      0
      /* Conversion Method      */      %<LibASAP2GetCompuMethod(yParam)>
      /* Number of Axis Pts     */      %<LibASAP2GetNumAxisPts(yParam)>
      /* Lower Limit            */      %<LibASAP2GetPhysicalMin(yParam)>
      /* Upper Limit            */      %<LibASAP2GetPhysicalMax(yParam)>
    /end AXIS_PTS
  %endif
%endfunction
