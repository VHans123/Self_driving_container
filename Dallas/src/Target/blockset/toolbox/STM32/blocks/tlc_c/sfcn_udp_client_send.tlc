%%***************************************************************************************
%% file         sfcn_udp_client_send.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2016 (c) by HAN Automotive     http://www.han.nl     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% This file is part of the HANcoder Target Matlab/Simulink Blockset environment. For the
%% licensing terms, please contact HAN Automotive.
%%
%% This software has been carefully tested, but is not guaranteed for any particular
%% purpose. HAN Automotive does not offer any warranties and does not guarantee the 
%% accuracy, adequacy, or completeness of the software and is not responsible for any 
%% errors or omissions or the results obtained from use of the software.
%%
%%***************************************************************************************
%implements  sfcn_udp_client_send "C"


%% add required include files
%<LibAddToCommonIncludes("udp_client.h")>


%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
  %% get the name of the model's source file.
  %assign srcFile = LibGetModelDotCFile()

  %% create a buffer that can be used for preparing data for packet transmission. note
  %% that dynamically allocate a send buffer as well, so there is no data consistency
  %% problem for having just one buffer for data preparation. 
  %%
  %% this preparation buffer is needed to be able to perform byte swapping. the total
  %% supported elements by this block is 32 and the largest data type for an element
  %% is 32-bit (4 bytes). the preparation buffer therefore needs to be 32*4=128 bytes
  %% in size.
  %<LibSetSourceFileSection(srcFile, "Declarations", "static uint8_t udpSendBuffer[128];\n")>
  
%endfunction


%% Function: Update ==========================================================
%%
%% Purpose:
%%      Code generation for signal input
%%
%function Update(block, system) Output
  %%
	%%
    %% Get the used data type
    %assign dataTypeNumber = LibGetDataTypeStorageIdFromId(CAST("Number",block.RTWdata.dataType) + 1)
    %%
    %% Prepare the data (with possible byte swap)
    {
      /* prepare the data */
      %% Loop through all the block inputs
      %foreach elementIdx = block.RTWdata.inputNumber
        %% int8, uint8 and boolean are all 1 byte values so they can be directly copied to the
        %% perparation buffer without byte swapping
        %if ISEQUAL(CAST("Number",block.RTWdata.dataType), 1) || ISEQUAL(CAST("Number",block.RTWdata.dataType), 2) || ISEQUAL(CAST("Number",block.RTWdata.dataType), 7)
        udpSendBuffer[%<elementIdx>] =  %<LibBlockInputSignal(elementIdx, "", "", 0)>;       
        %% int16 and uint16 are 2 byte values and need to be processes with the correct byteswapping
        %elseif ISEQUAL(CAST("Number",block.RTWdata.dataType), 3) || ISEQUAL(CAST("Number",block.RTWdata.dataType), 4)
          %if ISEQUAL(CAST("Number",block.RTWdata.byteOrder), 1)
          udpSendBuffer[(%<elementIdx> * 2)]     =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >> 8);       
          udpSendBuffer[(%<elementIdx> * 2) + 1] =  (uint8_t)(%<LibBlockInputSignal(elementIdx, "", "", 0)>);
          %else
          udpSendBuffer[(%<elementIdx> * 2)]     =  (uint8_t)(%<LibBlockInputSignal(elementIdx, "", "", 0)>);
          udpSendBuffer[(%<elementIdx> * 2) + 1] =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >> 8);       
          %endif
        %% int32 and uint32 are 4 byte values and need to be processes with the correct byteswapping
        %elseif ISEQUAL(CAST("Number",block.RTWdata.dataType), 5) || ISEQUAL(CAST("Number",block.RTWdata.dataType), 6)
          %if ISEQUAL(CAST("Number",block.RTWdata.byteOrder), 1)
          udpSendBuffer[(%<elementIdx> * 4)]     =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >> 24);       
          udpSendBuffer[(%<elementIdx> * 4) + 1] =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >> 16);       
          udpSendBuffer[(%<elementIdx> * 4) + 2] =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >>  8); 
          udpSendBuffer[(%<elementIdx> * 4) + 3] =  (uint8_t)(%<LibBlockInputSignal(elementIdx, "", "", 0)>);
          %else
          udpSendBuffer[(%<elementIdx> * 4)]     =  (uint8_t)(%<LibBlockInputSignal(elementIdx, "", "", 0)>);
          udpSendBuffer[(%<elementIdx> * 4) + 1] =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >>  8); 
          udpSendBuffer[(%<elementIdx> * 4) + 2] =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >> 16);
          udpSendBuffer[(%<elementIdx> * 4) + 3] =  (uint8_t)((%<LibBlockInputSignal(elementIdx, "", "", 0)>) >> 24);
          %endif
        %endif
      %endforeach
      
      %% Send the data
	    /* send the data to the UDP server */
      UdpClientSend(&udpSendBuffer[0], %<block.RTWdata.dataLength>, %<block.RTWdata.port>, %<block.RTWdata.ip1>, %<block.RTWdata.ip2>, %<block.RTWdata.ip3>, %<block.RTWdata.ip4>);
	}
	%%
%endfunction


%%******************************* end of sfcn_udp_client_send.tlc ***********************


